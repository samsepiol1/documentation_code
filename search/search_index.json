{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo ao Meu Reposit\u00f3rio De C\u00f3digos Nesse Reposit\u00f3rio est\u00e3o salvos os c\u00f3digos que produzi de maneira acad\u00eamica para diversas disciplinas a qual cursei ao de longo da minha jornada infinita para com o aprendizado. Espero que sirva de incentivo e que por meio desse reposit\u00f3rio seja poss\u00edvel concretizar o aprendizado e ver como diferentes linguagens, ferramentas e outros conhecimentos podem ser aplicados a diversos contextos e problemas. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#bem-vindo-ao-meu-repositorio-de-codigos","text":"Nesse Reposit\u00f3rio est\u00e3o salvos os c\u00f3digos que produzi de maneira acad\u00eamica para diversas disciplinas a qual cursei ao de longo da minha jornada infinita para com o aprendizado. Espero que sirva de incentivo e que por meio desse reposit\u00f3rio seja poss\u00edvel concretizar o aprendizado e ver como diferentes linguagens, ferramentas e outros conhecimentos podem ser aplicados a diversos contextos e problemas.","title":"Bem vindo ao Meu Reposit\u00f3rio De C\u00f3digos"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"mysql/","text":"SQL(Structured Query Language) - Banco de Dados I e Conceitos de Banco de Dados O que \u00e9 SQL? Structured Query Language, ou Linguagem de Consulta Estruturada ou SQL, \u00e9 a linguagem de pesquisa declarativa padr\u00e3o para banco de dados relacional. Muitas das caracter\u00edsticas originais do SQL foram inspiradas na \u00e1lgebra relacional. A linguagem \u00e9 um grande padr\u00e3o de banco de dados. Isto decorre da sua simplicidade e facilidade de uso. Ela se diferencia de outras linguagens de consulta a banco de dados no sentido em que uma consulta SQL especifica a forma do resultado e n\u00e3o o caminho para chegar a ele. Ela \u00e9 uma linguagem declarativa em oposi\u00e7\u00e3o a outras linguagens procedurais. Isto reduz o ciclo de aprendizado daqueles que se iniciam na linguagem. O que \u00e9 um SGBD? Um Sistema de Gerenciamento de Banco de Dados (portugu\u00eas brasileiro) ou Sistema de Gest\u00e3o de Bases de Dados (portugu\u00eas europeu)(SGBD) \u2014 do ingl\u00eas Data Base Management System (DBMS) \u2014 \u00e9 o sistema de software respons\u00e1vel pelo gerenciamento de um ou mais bancos de dados. Seu principal objetivo \u00e9 retirar da aplica\u00e7\u00e3o cliente a responsabilidade de gerenciar o acesso, a persist\u00eancia, a manipula\u00e7\u00e3o e a organiza\u00e7\u00e3o dos dados. O SGBD disponibiliza uma interface para que seus clientes possam incluir, alterar ou consultar dados previamente armazenados. Em bancos de dados relacionais a interface \u00e9 constitu\u00edda pelas API (Application Programming Interface) ou drivers do SGBD, que executam comandos na linguagem SQL (Structured Query Language). C\u00f3digos Produzidos Disciplina: Banco de Dados e Conceito de Banco de Dados SGBD: Postegres, Microsoft SQL Server, MYSQL Dado o modelo l\u00f3gico acima, gere os scripts SQL para cria\u00e7\u00e3o de todas as tabelas presentes nele, lembrando de incluir as chaves primarias, estrangeiras e os tipos de dados corretamente. Em seguida, crie tamb\u00e9m os scripts com o comando INSERT para inserir dados nas tabelas, de forma que cada uma deve possuir pelo menos um registro. create database perfumes; use perfumes; create table perfumes( nome varchar(50) not null primary key, quantidade integer not null, id_volume integer not null, id_marca integer not null, id_fixacao integer not null, id_essencia int not null ); create table volumes( nome_essencia varchar(50) not null, id_essencia int primary key references perfumes(id_essencia)); create table marcas( nome_marca varchar(50), id_marca int primary key references perfumes(id_marca)); create table fixacoes( nome_fixacao varchar(50), id_fixacao int primary key references perfumes(id_fixacao)); create table essencias( nome_essencia varchar(50), id_essencia int primary key references perfumes(id_fixacao)); delimiter $$ CREATE PROCEDURE SP_INSERT (IN sp_id1 INT, IN sp_id2 INT, IN sp_id3 INT, IN sp_id4 INT) BEGIN INSERT INTO perfumes (id_volume, id_marca, id_essencia, id_fixacao) VALUES ( sp_id1, sp_id2, sp_id3, sp_id4 ); END $$ DELIMITER ; call SP_INSERT(1,2,3,4); desc perfumes; show columns from perfumes; insert into perfumes values(\"Lavanda\",1,2,3,4,5); insert into volumes value(\"nome essencia1\"); insert into fixacoes value(\"fixacao boa\"); insert into essencias value(\"flor\"); insert into marcas value(\"boticario\"); Implemente o DB f\u00edsico usando o SGDB Microsoft SQL Server CREATE TABLE marca ( idMarcas INTEGER, descricao VARCHAR(100) ); CREATE TABLE nacionalidades( idNacionalidades SMALLINT AUTO_INCREMENT PRIMARY KEY, descricao VARCHAR(30) NOT NULL ); CREATE TABLE empresas( idEmpresas SMALLINT AUTO_INCREMENT PRIMARY KEY, descricaoEmpresas VARCHAR(200) NOT NULL ); CREATE TABLE clientes( cpf_cnpj VARCHAR(20), nome_razaoSocial VARCHAR(50), endereco VARCHAR(100), dataNascimento DATE, email VARCHAR(100) ); CREATE TABLE parcelas( idParcelas SMALLINT AUTO_INCREMENT PRIMARY KEY, vendas_idvendas SMALLINT, valorParcela FLOAT, mes VARCHAR(30), ano INTEGER, paga BOOLEAN ); CREATE TABLE produtos( idprodutos SMALLINT AUTO_INCREMENT PRIMARY KEY, nacionalidades_idnacionalidades INTEGER, nomeprod VARCHAR(100), explosivo BOOLEAN ); Dado o modelo l\u00f3gico, escreva o c\u00f3digo, em linguagem SQL, capaz de produzir o resultado abaixo: Resultado esperado SELECT * FROM PERFUMES WHERE quantidade = >10 and quantidade<=15 and nome = ''Baunilha\" and nome = \"Eau Cologne 7%\" and nome = \"Eau Cologne 8%\" and valor=15 Para desenvolver um novo banco de dados no SGBD MySQL Community \u00e9 necess\u00e1rio, primeiro, criar o banco de dados e em seguida indicar que ir\u00e1 utiliza-lo. Escreva os comandos SQL necess\u00e1rios para criar um banco chamado \u201cloja\u201d e, em seguida, o comando para indicar que ir\u00e1 trabalhar no banco de dados criado. Ap\u00f3s criar e selecionar o banco de dados loja, voc\u00ea dever\u00e1 escrever os comando do MySQL respons\u00e1veis por criar uma tabela chamada \u201cfuncionarios\u201d com os atributos \u201ccodigo\u201d, \u201cnome\u201d, \u201csalario\u201d e \u201cdata_de_nascimento\u201d. Defina os tipos de dados mais apropriados para cada um deles. Escreva o comando do MySQL respons\u00e1vel por remover todos os registros de uma tabela chamada \u201ccliente\u201d cujo atributo \u201cdata_de_nascimento\u201d seja anterior a 17 de janeiro de 2001. Com comandos do MySQL, crie uma tabela chamada \u201calunos\u201d com os campos \u201cmatricula\u201d (inteiro), \u201cnome\u201d (texto com at\u00e9 200 caracteres) e \u201ccurso\u201d (texto com at\u00e9 150 caracteres). Depois de criada a tabela insira dois novos alunos. CREATE DATABASE loja; USE loja; CREATE TABLE FUNCIONARIOS ( fun_nome VARCHAR(30), fun_codigo INT, fun_data_nascimento DATE, fun_salario INT ); DELETE FROM CLIENTES; WHERE data_de_nascimento=<'2001-01-17' CREATE TABLE alunos( alu_matricula INT, alu_nome VARCHAR(200), alu_texto VARCHAR(150) ); INSERT INTO alunos('alu_nome') VALUES('Lucas Matheus Alves da Silva', 'Roziana Dantas dos Santos'); Considerando que existe uma tabela em um banco chamada \u201cdisciplinas\u201d com um dos atributos chamado \u201cturno\u201d. Escreva duas formas distintas de selecionar todas as disciplinas cujo turno seja \u2018Matutino\u2019 e \u2018Vespertino\u2019. SELECT turno FROM disciplinas WHERE turno BETWEEN 'Matutino' and 'Vespertino' SELECT turno FROM disciplinas WHERE turno 'Matuitno' and turno 'Vespertino' Considerando uma tabela denominada \u201calimentos\u201d com os atributos \u201cnome\u201d, \u201cgramas_por_unidade\u201d e \u201ccalorias_por_unidade\u201d apresente uma consulta que possui como resultado uma lista com o nome dos alimentos com teor cal\u00f3rico menor que 1 caloria por grama. SELECT nome, gramas_por_unidade, calorias_por_unidade FROM alimentos WHERE gramas_por_unidade and calorias_por_unidade <1; A Figura 1 representa os dados referentes aos empregados de uma empresa hipot\u00e9tica. Para resolver as quest\u00f5es, crie uma tabela chamada empregados e insira os dados apresentados na Figura 1: Apresente as instru\u00e7\u00f5es SQL necess\u00e1rias para criar a tabela empregados. a) Todos os dados ordenados por matr\u00edcula. b) A quantidade de empregados da empresa. c) A matr\u00edcula, o nome e o sal\u00e1rio de todos os empregados, ordenados por nome. d) A m\u00e9dia salarial dos empregados com o tempo de servi\u00e7o superior a 1 anos. e) O departamento, o nome e o sal\u00e1rio dos empregados. Dentro do departamento, ordene os sal\u00e1rios do maior para o menor. CREATE DATABASE Empresa; USE Empresa; CREATE TABLE empregados( emp_matricula INT, emp_nome VARCHAR(10), emp_depto VARCHAR(30) , emp_funcao VARCHAR(30), emp_salario NUMERIC(4,2), emp_temposervico INT , emp_inicioferias DATE , emp_filhos INT, ); SELECT emp_matricula FROM Empregados ORDER BY emp_matricula; SELECT ABS(EMP_matricula) From Empregados; SELECT emp_matricula,emp_nome,emp_salario FROM Empregados ORDER BY emp_matricula, emp_matricula,emp_nome,emp_salario; SELECT AVG(Emp_salario) From creditos; Antes de iniciar a resolu\u00e7\u00e3o das quest\u00f5es de 1, 2, 3, 4 e 5, crie um banco de dados chamado escola. A Figura 1 representa a estrutura de uma tabela usada para armazenar notas de alunos. A) Crie uma tabela chamada notas conforme estrutura acima; B) Inclua a coluna dis_codigo, do tipo TINYINT, que ser\u00e1 usada para armazenar o c\u00f3digo da disciplina a qual est\u00e1 relacionada a nota informada; C) Adicione a coluna not_bimestre, do tipo TINYINT, que ser\u00e1 usada para registrar o bimestre ao qual est\u00e1 relacionado \u00e0 nota informada na coluna not_valor. Essa coluna deve estar entre not_valor e alu_nome; D) Remova a coluna alu_nome da tabela notas; E) Para finalizar a estrutura da tabela, crie a coluna alu_matricula, do tipo INT, antes da coluna dis_codigo, para armazenar a matr\u00edcula do aluno. Criar uma tabela chamada alunos com apenas tr\u00eas campos: alu_matricula(INT), alu_nomecompleto(VARCHAR com 50 posi\u00e7\u00f5es), alu_email(VARCHAR com 10 posi\u00e7\u00f5es); B) Alterar o nome do campo \u201calu_nomecompleto\u201d para apenas \u201calu_nome\u201d; C) Aumentar o tamanho do campo alu_email de 10 posi\u00e7\u00f5es para 30; D) Criar uma tabela chamada disciplinas com a seguinte estrutura: dis_codigo TINYINT, dis_nome VARCHAR(30) e dis_cargahoraria TINYINT ) Criar uma tabela chamada cursos que armazenar\u00e1 os cursos nos quais existem alunos matriculados. A tabela deve armazenar apenas o c\u00f3digo (cur_codigo) e o nome do curso (cur_nome), onde cur_codigo \u00e9 a chave prim\u00e1ria e o campo cur_nome n\u00e3o pode armazenar valores nulos. Destrua as tabelas notas, alunos e disciplinas; Recrie a tabela alunos Recrie a tabela notas A) Para cada um dos 2 cursos inseridos anteriormente, matricule pelo menos 2 alunos. Em seguida, insira 2 registros na tabela disciplinas; B) Quantos alunos est\u00e3o matriculados no curso ENG. DE SOFT? C) Gere um relat\u00f3rio, ordenado alfabeticamente, informando a quantidade de alunos por curso; D) Insira as notas de todos os alunos, apenas do primeiro bimestre, para as duas disciplinas cadastradas. Em seguida, gere um relat\u00f3rio informando a m\u00e9dia das notas dos alunos (arredondando para duas casas decimais) por curso e por disciplina. CREATE DATABASE escola; USE escola; CREATE TABLE notas( not_identificador INT, not_valor FLOAT, alu_nome VARCHAR(50) ); INSERT INTO(not_identificador,not_valor,alu_nome) VALUES(1,10,'Lucas Matheus Alves da Silva'); ALTER TABLE notas add dis_codigo TINYINT; ALTER TABLE notas add not_bimestre TINYINT; ALTER TABLE alunos add not_bimestre TINYINT after alu_nome; ALTER TABLE ALUNOS DROP COLUMN alu_nome; ALTER TABLE alunos add alu_matricula INT AFTER dis_codigo; CREATE TABLE alunos( alu_matricula INT, alu_nomecompleto VARCHAR(50), alu_email VARCHAR(10) ALTER TABLE alunos CHANGE COLUMN alu_nomecompleto alu_nome INT; ALTER TABLE alunos MODIFY COLUMN cli_email VARCHAR(30); CREATE TABLE DISCIPLINAS( dis_codigo TINYINT, dis_nome TINYINT, dis_nome VARCHAR(30) dis_cargahoraria TINYINT ); Drop table alunos; drop table notas drop table disciplinas; alu_email varchar(30) DEFAULT NULL, ); tabela disciplinas CREATE TABLE DISCIPLINAS( dis_codigo tinyint(4) DEFAULT NULL, dis_nome VARCHAR(30) DEFAULT NULL, dis_cargahoraria tinyint(4) DEFAULT NULL, ); tabela notas CREATE TABLE NOTAS( not_identificador int(11) DEFAULT NULL, not_valor float DEFAULT NULL, not_bimestre TINYINT(4) DEFAULT NULL, alu_matricula INT(11) DEFAULT NULL, dis_codigo TINYINT(4) DEFAULT NULL ); CREATE TABLE cursos( cur_codigo TINYINT(4) NOT NULL, cur_nome VARCHAR(20) NOT NULL, PRIMARY KEY(cur_codigo) ); INSERT INTO ('cursos') VALUES(1,'ENG DE SOFT'),(2,'SIS.DE INFO');","title":"SQL"},{"location":"mysql/#sqlstructured-query-language-banco-de-dados-i-e-conceitos-de-banco-de-dados","text":"","title":"SQL(Structured Query Language) -  Banco de Dados I e Conceitos de Banco de Dados"},{"location":"mysql/#o-que-e-sql","text":"Structured Query Language, ou Linguagem de Consulta Estruturada ou SQL, \u00e9 a linguagem de pesquisa declarativa padr\u00e3o para banco de dados relacional. Muitas das caracter\u00edsticas originais do SQL foram inspiradas na \u00e1lgebra relacional. A linguagem \u00e9 um grande padr\u00e3o de banco de dados. Isto decorre da sua simplicidade e facilidade de uso. Ela se diferencia de outras linguagens de consulta a banco de dados no sentido em que uma consulta SQL especifica a forma do resultado e n\u00e3o o caminho para chegar a ele. Ela \u00e9 uma linguagem declarativa em oposi\u00e7\u00e3o a outras linguagens procedurais. Isto reduz o ciclo de aprendizado daqueles que se iniciam na linguagem.","title":"O que \u00e9 SQL?"},{"location":"mysql/#o-que-e-um-sgbd","text":"Um Sistema de Gerenciamento de Banco de Dados (portugu\u00eas brasileiro) ou Sistema de Gest\u00e3o de Bases de Dados (portugu\u00eas europeu)(SGBD) \u2014 do ingl\u00eas Data Base Management System (DBMS) \u2014 \u00e9 o sistema de software respons\u00e1vel pelo gerenciamento de um ou mais bancos de dados. Seu principal objetivo \u00e9 retirar da aplica\u00e7\u00e3o cliente a responsabilidade de gerenciar o acesso, a persist\u00eancia, a manipula\u00e7\u00e3o e a organiza\u00e7\u00e3o dos dados. O SGBD disponibiliza uma interface para que seus clientes possam incluir, alterar ou consultar dados previamente armazenados. Em bancos de dados relacionais a interface \u00e9 constitu\u00edda pelas API (Application Programming Interface) ou drivers do SGBD, que executam comandos na linguagem SQL (Structured Query Language).","title":"O que \u00e9 um SGBD?"},{"location":"mysql/#codigos-produzidos","text":"Disciplina: Banco de Dados e Conceito de Banco de Dados SGBD: Postegres, Microsoft SQL Server, MYSQL Dado o modelo l\u00f3gico acima, gere os scripts SQL para cria\u00e7\u00e3o de todas as tabelas presentes nele, lembrando de incluir as chaves primarias, estrangeiras e os tipos de dados corretamente. Em seguida, crie tamb\u00e9m os scripts com o comando INSERT para inserir dados nas tabelas, de forma que cada uma deve possuir pelo menos um registro. create database perfumes; use perfumes; create table perfumes( nome varchar(50) not null primary key, quantidade integer not null, id_volume integer not null, id_marca integer not null, id_fixacao integer not null, id_essencia int not null ); create table volumes( nome_essencia varchar(50) not null, id_essencia int primary key references perfumes(id_essencia)); create table marcas( nome_marca varchar(50), id_marca int primary key references perfumes(id_marca)); create table fixacoes( nome_fixacao varchar(50), id_fixacao int primary key references perfumes(id_fixacao)); create table essencias( nome_essencia varchar(50), id_essencia int primary key references perfumes(id_fixacao)); delimiter $$ CREATE PROCEDURE SP_INSERT (IN sp_id1 INT, IN sp_id2 INT, IN sp_id3 INT, IN sp_id4 INT) BEGIN INSERT INTO perfumes (id_volume, id_marca, id_essencia, id_fixacao) VALUES ( sp_id1, sp_id2, sp_id3, sp_id4 ); END $$ DELIMITER ; call SP_INSERT(1,2,3,4); desc perfumes; show columns from perfumes; insert into perfumes values(\"Lavanda\",1,2,3,4,5); insert into volumes value(\"nome essencia1\"); insert into fixacoes value(\"fixacao boa\"); insert into essencias value(\"flor\"); insert into marcas value(\"boticario\"); Implemente o DB f\u00edsico usando o SGDB Microsoft SQL Server CREATE TABLE marca ( idMarcas INTEGER, descricao VARCHAR(100) ); CREATE TABLE nacionalidades( idNacionalidades SMALLINT AUTO_INCREMENT PRIMARY KEY, descricao VARCHAR(30) NOT NULL ); CREATE TABLE empresas( idEmpresas SMALLINT AUTO_INCREMENT PRIMARY KEY, descricaoEmpresas VARCHAR(200) NOT NULL ); CREATE TABLE clientes( cpf_cnpj VARCHAR(20), nome_razaoSocial VARCHAR(50), endereco VARCHAR(100), dataNascimento DATE, email VARCHAR(100) ); CREATE TABLE parcelas( idParcelas SMALLINT AUTO_INCREMENT PRIMARY KEY, vendas_idvendas SMALLINT, valorParcela FLOAT, mes VARCHAR(30), ano INTEGER, paga BOOLEAN ); CREATE TABLE produtos( idprodutos SMALLINT AUTO_INCREMENT PRIMARY KEY, nacionalidades_idnacionalidades INTEGER, nomeprod VARCHAR(100), explosivo BOOLEAN ); Dado o modelo l\u00f3gico, escreva o c\u00f3digo, em linguagem SQL, capaz de produzir o resultado abaixo:","title":"C\u00f3digos Produzidos"},{"location":"mysql/#resultado-esperado","text":"SELECT * FROM PERFUMES WHERE quantidade = >10 and quantidade<=15 and nome = ''Baunilha\" and nome = \"Eau Cologne 7%\" and nome = \"Eau Cologne 8%\" and valor=15 Para desenvolver um novo banco de dados no SGBD MySQL Community \u00e9 necess\u00e1rio, primeiro, criar o banco de dados e em seguida indicar que ir\u00e1 utiliza-lo. Escreva os comandos SQL necess\u00e1rios para criar um banco chamado \u201cloja\u201d e, em seguida, o comando para indicar que ir\u00e1 trabalhar no banco de dados criado. Ap\u00f3s criar e selecionar o banco de dados loja, voc\u00ea dever\u00e1 escrever os comando do MySQL respons\u00e1veis por criar uma tabela chamada \u201cfuncionarios\u201d com os atributos \u201ccodigo\u201d, \u201cnome\u201d, \u201csalario\u201d e \u201cdata_de_nascimento\u201d. Defina os tipos de dados mais apropriados para cada um deles. Escreva o comando do MySQL respons\u00e1vel por remover todos os registros de uma tabela chamada \u201ccliente\u201d cujo atributo \u201cdata_de_nascimento\u201d seja anterior a 17 de janeiro de 2001. Com comandos do MySQL, crie uma tabela chamada \u201calunos\u201d com os campos \u201cmatricula\u201d (inteiro), \u201cnome\u201d (texto com at\u00e9 200 caracteres) e \u201ccurso\u201d (texto com at\u00e9 150 caracteres). Depois de criada a tabela insira dois novos alunos. CREATE DATABASE loja; USE loja; CREATE TABLE FUNCIONARIOS ( fun_nome VARCHAR(30), fun_codigo INT, fun_data_nascimento DATE, fun_salario INT ); DELETE FROM CLIENTES; WHERE data_de_nascimento=<'2001-01-17' CREATE TABLE alunos( alu_matricula INT, alu_nome VARCHAR(200), alu_texto VARCHAR(150) ); INSERT INTO alunos('alu_nome') VALUES('Lucas Matheus Alves da Silva', 'Roziana Dantas dos Santos'); Considerando que existe uma tabela em um banco chamada \u201cdisciplinas\u201d com um dos atributos chamado \u201cturno\u201d. Escreva duas formas distintas de selecionar todas as disciplinas cujo turno seja \u2018Matutino\u2019 e \u2018Vespertino\u2019. SELECT turno FROM disciplinas WHERE turno BETWEEN 'Matutino' and 'Vespertino' SELECT turno FROM disciplinas WHERE turno 'Matuitno' and turno 'Vespertino' Considerando uma tabela denominada \u201calimentos\u201d com os atributos \u201cnome\u201d, \u201cgramas_por_unidade\u201d e \u201ccalorias_por_unidade\u201d apresente uma consulta que possui como resultado uma lista com o nome dos alimentos com teor cal\u00f3rico menor que 1 caloria por grama. SELECT nome, gramas_por_unidade, calorias_por_unidade FROM alimentos WHERE gramas_por_unidade and calorias_por_unidade <1; A Figura 1 representa os dados referentes aos empregados de uma empresa hipot\u00e9tica. Para resolver as quest\u00f5es, crie uma tabela chamada empregados e insira os dados apresentados na Figura 1: Apresente as instru\u00e7\u00f5es SQL necess\u00e1rias para criar a tabela empregados. a) Todos os dados ordenados por matr\u00edcula. b) A quantidade de empregados da empresa. c) A matr\u00edcula, o nome e o sal\u00e1rio de todos os empregados, ordenados por nome. d) A m\u00e9dia salarial dos empregados com o tempo de servi\u00e7o superior a 1 anos. e) O departamento, o nome e o sal\u00e1rio dos empregados. Dentro do departamento, ordene os sal\u00e1rios do maior para o menor. CREATE DATABASE Empresa; USE Empresa; CREATE TABLE empregados( emp_matricula INT, emp_nome VARCHAR(10), emp_depto VARCHAR(30) , emp_funcao VARCHAR(30), emp_salario NUMERIC(4,2), emp_temposervico INT , emp_inicioferias DATE , emp_filhos INT, ); SELECT emp_matricula FROM Empregados ORDER BY emp_matricula; SELECT ABS(EMP_matricula) From Empregados; SELECT emp_matricula,emp_nome,emp_salario FROM Empregados ORDER BY emp_matricula, emp_matricula,emp_nome,emp_salario; SELECT AVG(Emp_salario) From creditos; Antes de iniciar a resolu\u00e7\u00e3o das quest\u00f5es de 1, 2, 3, 4 e 5, crie um banco de dados chamado escola. A Figura 1 representa a estrutura de uma tabela usada para armazenar notas de alunos. A) Crie uma tabela chamada notas conforme estrutura acima; B) Inclua a coluna dis_codigo, do tipo TINYINT, que ser\u00e1 usada para armazenar o c\u00f3digo da disciplina a qual est\u00e1 relacionada a nota informada; C) Adicione a coluna not_bimestre, do tipo TINYINT, que ser\u00e1 usada para registrar o bimestre ao qual est\u00e1 relacionado \u00e0 nota informada na coluna not_valor. Essa coluna deve estar entre not_valor e alu_nome; D) Remova a coluna alu_nome da tabela notas; E) Para finalizar a estrutura da tabela, crie a coluna alu_matricula, do tipo INT, antes da coluna dis_codigo, para armazenar a matr\u00edcula do aluno. Criar uma tabela chamada alunos com apenas tr\u00eas campos: alu_matricula(INT), alu_nomecompleto(VARCHAR com 50 posi\u00e7\u00f5es), alu_email(VARCHAR com 10 posi\u00e7\u00f5es); B) Alterar o nome do campo \u201calu_nomecompleto\u201d para apenas \u201calu_nome\u201d; C) Aumentar o tamanho do campo alu_email de 10 posi\u00e7\u00f5es para 30; D) Criar uma tabela chamada disciplinas com a seguinte estrutura: dis_codigo TINYINT, dis_nome VARCHAR(30) e dis_cargahoraria TINYINT ) Criar uma tabela chamada cursos que armazenar\u00e1 os cursos nos quais existem alunos matriculados. A tabela deve armazenar apenas o c\u00f3digo (cur_codigo) e o nome do curso (cur_nome), onde cur_codigo \u00e9 a chave prim\u00e1ria e o campo cur_nome n\u00e3o pode armazenar valores nulos. Destrua as tabelas notas, alunos e disciplinas; Recrie a tabela alunos Recrie a tabela notas A) Para cada um dos 2 cursos inseridos anteriormente, matricule pelo menos 2 alunos. Em seguida, insira 2 registros na tabela disciplinas; B) Quantos alunos est\u00e3o matriculados no curso ENG. DE SOFT? C) Gere um relat\u00f3rio, ordenado alfabeticamente, informando a quantidade de alunos por curso; D) Insira as notas de todos os alunos, apenas do primeiro bimestre, para as duas disciplinas cadastradas. Em seguida, gere um relat\u00f3rio informando a m\u00e9dia das notas dos alunos (arredondando para duas casas decimais) por curso e por disciplina. CREATE DATABASE escola; USE escola; CREATE TABLE notas( not_identificador INT, not_valor FLOAT, alu_nome VARCHAR(50) ); INSERT INTO(not_identificador,not_valor,alu_nome) VALUES(1,10,'Lucas Matheus Alves da Silva'); ALTER TABLE notas add dis_codigo TINYINT; ALTER TABLE notas add not_bimestre TINYINT; ALTER TABLE alunos add not_bimestre TINYINT after alu_nome; ALTER TABLE ALUNOS DROP COLUMN alu_nome; ALTER TABLE alunos add alu_matricula INT AFTER dis_codigo; CREATE TABLE alunos( alu_matricula INT, alu_nomecompleto VARCHAR(50), alu_email VARCHAR(10) ALTER TABLE alunos CHANGE COLUMN alu_nomecompleto alu_nome INT; ALTER TABLE alunos MODIFY COLUMN cli_email VARCHAR(30); CREATE TABLE DISCIPLINAS( dis_codigo TINYINT, dis_nome TINYINT, dis_nome VARCHAR(30) dis_cargahoraria TINYINT ); Drop table alunos; drop table notas drop table disciplinas; alu_email varchar(30) DEFAULT NULL, ); tabela disciplinas CREATE TABLE DISCIPLINAS( dis_codigo tinyint(4) DEFAULT NULL, dis_nome VARCHAR(30) DEFAULT NULL, dis_cargahoraria tinyint(4) DEFAULT NULL, ); tabela notas CREATE TABLE NOTAS( not_identificador int(11) DEFAULT NULL, not_valor float DEFAULT NULL, not_bimestre TINYINT(4) DEFAULT NULL, alu_matricula INT(11) DEFAULT NULL, dis_codigo TINYINT(4) DEFAULT NULL ); CREATE TABLE cursos( cur_codigo TINYINT(4) NOT NULL, cur_nome VARCHAR(20) NOT NULL, PRIMARY KEY(cur_codigo) ); INSERT INTO ('cursos') VALUES(1,'ENG DE SOFT'),(2,'SIS.DE INFO');","title":"Resultado esperado"}]}